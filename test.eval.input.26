(caar '((1))) 1
(caar '((1 2) (3 4) (5 6) (7 8)))      ==> 1
(cadr '((1 2) (3 4) (5 6) (7 8)))      ==> (3 4)
(cadr (quote (1 2 3))) 2

(list 1 2 3)                           ==> (1 2 3)

(list? '()) #t
(list? '(1 2 3)) #t
(list? '(3 . 4)) #f
(list? '(a b c)) #t
(list? 3) #f

(length (list 1 2 3 4)) 4
(length (quote ())) 0
(length (quote (1 2 3))) 3

(list-ref '(0 1 2 3 4) 3)              ==> 3 
(list-ref (list 'a 'b 'c) 0)            a
(list-ref (cons 1 2) 0)                 1

(list-tail '(0 1 2 3 4) 3)             ==> (3 4)
(list-tail (list 1 2 3 4) 2)            (3 4)
(list-tail (cons 1 2) 1)                  
2
(list-tail 'not-a-pair 0)
not-a-pair

(member 'a '(1 2 3 a b c))             ==> (a b c)
(member 2 (list 1 2 3 4))
(2 3 4)
(member 9 (list 1 2 3 4))
#f

(assq 'c (list (list 'a 'b) (list 'c 'd) (list 'e 'f)))
(c d)
assq 2 '((0 a) (1 b) (2 c) (3 d)))    ==> (2 c)

(append '(a b) '(c d))                 ==> (a b c d)

(reverse '(1 2 3))                     ==> (3 2 1)
(reverse (list 1 2 3 4))
(4 3 2 1)
(reverse '())
()
(freverse '(1))
(1)

(map (lambda (x) (* x x)) '(1 2 3))    ==> (1 4 9)
(map (lambda (number)
         (+ 1 number))
                '(1 2 3 4))
(2 3 4 5)
(map (lambda (number1 number2)
         (+ number1 number2))
                '(1 2 3 4)
                       '(10 100 1000 10000))
(11 102 1003 10004)

(filter odd? '(1 2 3))                 ==> (1 3)

(foldl cons '() '(1 2 3))              ==> (3 2 1)

(foldr cons '() '(1 2 3))              ==> (1 2 3)
